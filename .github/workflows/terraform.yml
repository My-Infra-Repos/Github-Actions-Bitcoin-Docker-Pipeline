
name: 'Terraform_Plan_Apply'
on:
  push:
    branches:
    - "main"
    #- "terraform-destroy"
  pull_request:
  discussion_comment:
 
    


permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        repo_url: ${{secrets.REPO_URL}}
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.

      #run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   run: terraform -chdir='environment/demo' plan -input=false
    - name: Terraform Init
      run: terraform -chdir='modules/ecr' init 
      

    - name: Terraform ECR Creation
      if: github.event_name == 'push'
      run: terraform -chdir='modules/ecr' apply -auto-approve -input=false

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: demo_app
        IMAGE_TAG: demo1
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
    - name: Terraform Init For Main Module
      run: terraform -chdir='environment/demo' init   
    - name: Terraform Apply for VPC, SUBnets, Nat gateways, ECS, EFS
      run: terraform -chdir='environment/demo' apply -auto-approve -input=false       
